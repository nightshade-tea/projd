#subruledef register
{
    r0  => 0x0
    r1  => 0x1
    r2  => 0x2
    r3  => 0x3
    r4  => 0x4
    r5  => 0x5
    r6  => 0x6
    r7  => 0x7
    r8  => 0x8
    r9  => 0x9
    r10 => 0xA
    r11 => 0xB
    r12 => 0xC
    r13 => 0xD
    r14 => 0xE
    r15 => 0xF

    zero => 0x0
    rad  => 0x1
    rbp  => 0x2
    rsp  => 0x3
    rt0  => 0x4
    rt1  => 0x5
    rt2  => 0x6
    rt3  => 0x7
    rs0  => 0x8
    rs1  => 0x9
    rs2  => 0xA
    rs3  => 0xB
    ra0  => 0xC
    ra1  => 0xD
    ra2  => 0xE
    ra3  => 0xF
}

#ruledef
{
    add {rd: register}, {rs1: register}, {rs2: register} => 0b0000000 @ rs2 @ rs1 @ 0b000 @ rd @ 0b00
    sub {rd: register}, {rs1: register}, {rs2: register} => 0b0000000 @ rs2 @ rs1 @ 0b001 @ rd @ 0b00
    mul {rd: register}, {rs1: register}, {rs2: register} => 0b0000000 @ rs2 @ rs1 @ 0b010 @ rd @ 0b00
    div {rd: register}, {rs1: register}, {rs2: register} => 0b0000000 @ rs2 @ rs1 @ 0b011 @ rd @ 0b00
    mod {rd: register}, {rs1: register}, {rs2: register} => 0b0000000 @ rs2 @ rs1 @ 0b100 @ rd @ 0b00
    and {rd: register}, {rs1: register}, {rs2: register} => 0b0000000 @ rs2 @ rs1 @ 0b101 @ rd @ 0b00
    or  {rd: register}, {rs1: register}, {rs2: register} => 0b0000000 @ rs2 @ rs1 @ 0b110 @ rd @ 0b00
    xor {rd: register}, {rs1: register}, {rs2: register} => 0b0000000 @ rs2 @ rs1 @ 0b111 @ rd @ 0b00

    addi {rd: register}, {rs1: register}, {imm: s11} => imm @ rs1 @ 0b000 @ rd @ 0b01
    lw   {rd: register}, {imm: s11}({rs1: register}) => imm @ rs1 @ 0b001 @ rd @ 0b01
    jalr {rd: register}, {rs1: register}, {imm: s11} => imm @ rs1 @ 0b010 @ rd @ 0b01
    slli {rd: register}, {rs1: register}, {imm: s11} => imm @ rs1 @ 0b011 @ rd @ 0b01
    modi {rd: register}, {rs1: register}, {imm: s11} => imm @ rs1 @ 0b100 @ rd @ 0b01
    andi {rd: register}, {rs1: register}, {imm: s11} => imm @ rs1 @ 0b101 @ rd @ 0b01
    ori  {rd: register}, {rs1: register}, {imm: s11} => imm @ rs1 @ 0b110 @ rd @ 0b01
    xori {rd: register}, {rs1: register}, {imm: s11} => imm @ rs1 @ 0b111 @ rd @ 0b01

    sw   {rs2: register}, {imm: s11}({rs1: register}) => imm[10:4] @ rs2 @ rs1 @ 0b000 @ imm[3:0] @ 0b10
    halt                                              => 0b000000000000000 @ 0b001 @ 0b0000 @ 0b10
    beq  {rs1: register}, {rs2: register}, {imm: s11} => imm[10:4] @ rs2 @ rs1 @ 0b100 @ imm[3:0] @ 0b10
    bne  {rs1: register}, {rs2: register}, {imm: s11} => imm[10:4] @ rs2 @ rs1 @ 0b101 @ imm[3:0] @ 0b10
    bge  {rs1: register}, {rs2: register}, {imm: s11} => imm[10:4] @ rs2 @ rs1 @ 0b110 @ imm[3:0] @ 0b10
    blt  {rs1: register}, {rs2: register}, {imm: s11} => imm[10:4] @ rs2 @ rs1 @ 0b111 @ imm[3:0] @ 0b10

    li   {rd: register}, {imm: i16} => imm @ 0b00 @ rd @ 0b11
}

_start:
	addi r1, r0, 19 ; r1 = 19
	addi r2, r0, 4  ; r2 = 4
	
	add  r1, r1, r2 ; r1 = 23
	sub  r1, r2, r1 ; r1 = -19
	div  r1, r1, r2 ; r1 = -4
	mod  r1, r1, r2 ; r1 = 0
	addi r1, r0, 3  ; r1 = 3
	and  r1, r1, r2 ; r1 = 0
	or   r1, r1, r2 ; r1 = 4
	xor  r1, r1, r2 ; r1 = 0
	
	addi r1, r0, 19 ; r1 = 19
	modi r1, r1, 10 ; r1 = 9
	andi r1, r1, 8  ; r1 = 8
	ori  r1, r1, 3  ; r1 = 11
	xori r1, r1, 15 ; r1 = 4
	
	li   r1, 57005  ; r1 = 0xdead
	slli r1, r1, 16 ; r1 = 0xdead0000
	li   r1, 48879  ; r1 = 0xdeadbeef
	
	sw   r1, 0(r0)  ; MD[0] = 0xdeadbeef
	addi r1, r0, 0  ; r1 = 0
	lw   r1, 0(r0)  ; r1 = 0xdeadbeef
	li   r1, 51966  ; r1 = 0xdeadcafe
	slli r1, r1, 16 ; r1 = 0xcafe0000
	sw   r1, 1(r0)  ; MD[1] = 0xcafe0000
	
	addi r1, r0, 1  ; r1 = 1
	addi r2, r0, 2  ; r2 = 2
	
	beq  r1, r1, 2  ; salta para A
	addi r1, r0, -1

A:  beq  r1, r2, -1024 ; nao salta
	bne  r1, r2, 2  ; salta para B	
	addi r1, r0, -1

B:  bne  r1, r1, -1024 ; nao salta
	bge  r2, r1, 2  ; salta para C
	addi r1, r0, -1

C:  bge  r1, r2, -1024 ; nao salta
	blt  r1, r2, 2  ; salta para D
	addi r1, r0, -1	

D:  blt  r2, r1, -1024 ; nao salta

	jalr r3, r0, 41  ; salta para func
	
	addi r1, r0, 79  ; r1 = 79

	halt
	
func:
	addi r1, r0, 97 ; r1 = 97
	jalr r0, r3, 0  ; retorna
